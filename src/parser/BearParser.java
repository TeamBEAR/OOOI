// this code is inlined before the generated parser
 package parser;
 
 import execution.Execution;
 import execution.commands.*;
 import execution.CommandFactory;
 import core.Context;


import java.util.ArrayList;
import beaver.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "BearParser.grammar".
 */
public class BearParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short SEMICOLON = 1;
		static public final short A_ID = 2;
		static public final short F_ID = 3;
		static public final short COMMA = 4;
		static public final short NEW = 5;
		static public final short TYPE_AGENT = 6;
		static public final short COLON = 7;
		static public final short RESERVED = 8;
		static public final short CONJUNCTION = 9;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9nzqEjEma0GXk6lP#pH0d9ICSR4w$IMFQ62Chmxz0ScoZPFPhepksr6qgDApPGeLghCdbM" +
		"eiPt6zggHSceNgCrKsTv#x5kjlTFneaQTUbnAkhAj9lQcARsL8cgjLsBkZPGXvRPG2yITaJ" +
		"yr4XUJymTy9#OzHq7V$4c#CaGOOu9f#2P6c8K#b5XWYTLmxXetGtwBDUvmZuUmRsQR4F$2I" +
		"a$oV8ZLoLv$vknS$oxxi8rz4Jz$RRS#iSRdTzIwrETKCwMIMDBJaNVabKlK7m3cIZCJ");

 // this code is inlined in the generated parser class
 
 Execution execution;
 Context context;
 
 public BearParser(Context context){
     this();
     this.context = context;
     this.execution = new Execution();
 }

	private final Action[] actions;

	public BearParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] goal = statement SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("0");return new Symbol(0);
				}
			},
			new Action() {	// [1] statement = assignment
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("1");return new Symbol(1);
				}
			},
			new Action() {	// [2] statement = call
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("2");return new Symbol(2);
				}
			},
			new Action() {	// [3] statement = RESERVED.reserved
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol reserved = _symbols[offset + 1];
					 execution.add(CommandFactory.get((String)reserved.value, context));
                                                         System.out.println("3");return new Symbol(3);
				}
			},
			new Action() {	// [4] assignment = A_ID.a_id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a_id = _symbols[offset + 1];
					execution.add(new assignment("Agent", (String)a_id.value, context));
                                                                                     System.out.println("4");return new Symbol(4);
				}
			},
			new Action() {	// [5] assignment = NEW TYPE_AGENT COLON A_ID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("5");return new Symbol(5);
				}
			},
			new Action() {	// [6] paramlist = A_ID
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("6");return new Symbol(6);
				}
			},
			new Action() {	// [7] paramlist = A_ID COMMA paramlist
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("7");return new Symbol(7);
				}
			},
			new Action() {	// [8] function = F_ID.f_id
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol f_id = _symbols[offset + 1];
					 execution.add(CommandFactory.get((String)f_id.value, context));
                                                   System.out.println("8");return new Symbol(8);
				}
			},
			new Action() {	// [9] function = F_ID paramlist
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("9");return new Symbol(9);
				}
			},
			new Action() {	// [10] call = A_ID COMMA functionlist
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("10");return new Symbol(10);
				}
			},
			new Action() {	// [11] call = functionlist
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("11");return new Symbol(11);
				}
			},
			new Action() {	// [12] functionlist = function
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("12");return new Symbol(12);
				}
			},
			new Action() {	// [13] functionlist = function CONJUNCTION functionlist
				public Symbol reduce(Symbol[] _symbols, int offset) {
					System.out.println("13");return new Symbol(13);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
